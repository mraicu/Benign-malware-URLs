import urllib.parse


class FeatureExtraction():
    def __init__(self, URL):
        self._URL = URL
        self._scheme = ''
        self._hostName = ''
        self._path = ''
        self._params = ''

    def splitURL(self):
        '''
        Separate the URL into three sections: Scheme, Hostname, Path, Parameters
        :return Scheme, Hostname, Path, Parameters
        '''
        parsedURL = urllib.parse.urlparse(self._URL)
        self._scheme = parsedURL.scheme
        self._hostName = parsedURL.hostname
        self._path = parsedURL.path
        self._params = parsedURL.params
        return self._scheme, self._hostName, self._path, self._params

    def extractHostnameSize(self):
        '''
        Extract hostname size.
        :return: hostname size
        '''
        return len(self._hostName)

    def extractPathSize(self):
        '''
        Extract path size.
        :return: path size
        '''
        return len(self._path)

    def countDelimiters(self, delim, string):
        '''
        Count delimiters like: ‘-’, ‘@’, ‘?’, ‘.’, ‘=’, ‘%’, ‘http’, ‘www’ in a given string.
        :return: the number of delimiters
        '''
        return string.count(delim)

    def countDigits(self, string):
        '''
        Count digits in a given string.
        :return: the number of digits
        '''
        digits = [l for l in string if l.isdigit()]
        return len(digits)

    def countTokens(self):
        '''
        Count tokens delimited by: ‘-’, ‘@’, ‘?’, ‘.’, ‘=’, ‘%’, ‘http’, ‘www’ in URL.
        :return: the number of tokens
        '''

    def countDirectories(self):
        '''
        Count directories.
        :return: the number of directories from path
        '''
        return len(self._path.split('/'))

    def countBlacklistWord(self):
        '''
        Blacklists such as the Google Safebrowsing API
        :return:
        '''
        pass

    def containProtocol(self):
        '''
        Verify if scheme exists.
        :return:
        '''
        if self._scheme == 'http' or 'https':
            return 0
        else:
            return 1

    def similarityToMostPopularWebsites(self):
        pass

    def vowelConsonantRatioInHostname(self):
        '''
        Calculate the ratio between vowels and consonants from hostName.
        :return: vowel/consonant
        '''
        vowels = "aeiouAEIOU"
        vowelsNum = len([v for v in self._hostName if v in vowels])
        consonantNum = len([c for c in self._hostName if c not in vowels])
        return vowelsNum / consonantNum

    def digitLetterRatio(self):
        '''
        Calculate the ratio between digits and letters from URL.
        :return: digit/letter
        '''
        digitsNo = len([l for l in self._URL if l.isdigit()])
        lettersNo = len(self._URL) - digitsNo
        return digitsNo / lettersNo
