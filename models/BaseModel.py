from abc import ABC, abstractmethod  # Abstract Base Classes
from sklearn.metrics import accuracy_score, confusion_matrix, f1_score, precision_score, recall_score


class BaseModel(ABC):
    def __init__(self, X_train, y_train, X_test, y_test, params):
        self.params = params
        self.X_train = X_train
        self.y_train = y_train
        self.X_test = X_test
        self.y_test = y_test
        self.y_pred = None

    @abstractmethod
    def train(self):
        pass

    @abstractmethod
    def predict(self, X):
        pass

    def get_evaluation_metrics(self):
        acc = accuracy_score(self.y_test, self.y_pred)
        cm = confusion_matrix(self.y_test, self.y_pred)
        f1 = f1_score(self.y_test, self.y_pred)
        precision = precision_score(self.y_test, self.y_pred)
        recall = recall_score(self.y_test, self.y_pred)
        return {'accuracy': acc,
                'cm': cm,
                'f1': f1,
                'precision': precision,
                'recall': recall
                }
