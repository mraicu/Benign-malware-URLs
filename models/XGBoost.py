import xgboost as xgb
from models.BaseModel import BaseModel


class XGBoostModel(BaseModel):
    def __init__(self, X_train, y_train, X_test, y_test, params):
        super().__init__(X_train, y_train, X_test, y_test, params)

    def train(self):
        model = xgb.XGBClassifier(**self.params)
        model.fit(self.X_train, self.y_train,
                  eval_set=[(self.X_train, self.y_train), (self.X_test, self.y_test)],
                  verbose=False)
        self.model = model

    def predict(self, X=None):
        if X is None:
            self.y_pred = self.model.predict(self.X_test)
        else:
            self.y_pred = self.model.predict(X)
        return self.y_pred
