import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import accuracy_score
from sklearn.metrics import classification_report, confusion_matrix, f1_score


# Load the data
train_data = pd.read_csv("train.csv")
validation_data = pd.read_csv("validation.csv")
test_data = pd.read_csv("test_samples_only.csv")

# Vectorize the URLs
vectorizer = CountVectorizer()
X_train_vec = vectorizer.fit_transform(train_data["url"])
X_validation_vec = vectorizer.transform(validation_data["url"])
X_test_vec = vectorizer.transform(test_data["url"])

# Train the classifier
y_train = train_data["label"]
model = MultinomialNB()
model.fit(X_train_vec, y_train)

# Predict on the validation set and assess performance
y_validation = validation_data["label"]
y_validation_pred = model.predict(X_validation_vec)
validation_acc = accuracy_score(y_validation, y_validation_pred)
print("Validation accuracy:", validation_acc)

# Predict on the test set and save results to submission file
y_test_pred = model.predict(X_test_vec)
submission_df = pd.DataFrame({"url": test_data["url"], "label": y_test_pred})
submission_df.to_csv("submission.csv", index=False)


# Predict on the validation set
y_validation_pred = model.predict(X_validation_vec)

# Calculate performance metrics
validation_acc = accuracy_score(y_validation, y_validation_pred)
validation_f1 = f1_score(y_validation, y_validation_pred, average="macro")
print("Validation accuracy:", validation_acc)
print("Validation F1 score:", validation_f1)

# Plot the confusion matrix
cm = confusion_matrix(y_validation, y_validation_pred)
labels = ["Benign", "Malware"]
df_cm = pd.DataFrame(cm, index=labels, columns=labels)
sns.heatmap(df_cm, annot=True, cmap="Blues")
plt.title("Validation Set Confusion Matrix")
plt.xlabel("Predicted Label")
plt.ylabel("True Label")
plt.show()

# Print the classification report
print(classification_report(y_validation, y_validation_pred, target_names=labels))