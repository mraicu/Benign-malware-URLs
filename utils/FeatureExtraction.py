import urllib.parse
import re


class FeatureExtractor:
    def __init__(self, URL):
        self._URL = URL
        self._scheme = ''
        self._host_name = ''
        self._path = ''
        self._params = ''
        self.split_URL()

    def __str__(self):
        return 'URL: ' + self._URL + 'scheme: ' + self._scheme + 'hostName: ' \
            + self._host_name + 'path: ' + self._path + 'params: ' + self._params

    def get_host_name(self):
        return self._hostName

    def get_URL(self):
        return self._URL

    def get_path(self):
        return self._path

    def split_URL(self):
        '''
        Separate the URL into three sections: Scheme, Hostname, Path, Parameters
        :return Scheme, Hostname, Path, Parameters
        '''
        parsedURL = urllib.parse.urlparse(self._URL)
        self._scheme = parsedURL.scheme
        self._hostName = parsedURL.hostname
        self._path = parsedURL.path
        self._params = parsedURL.params
        return self._scheme, self._hostName, self._path, self._params

    def extract_host_name_size(self):
        '''
        Extract hostname size.
        :return: hostname size
        '''
        return len(self._hostName) if self._hostName is not None else 0

    def extract_path_size(self):
        '''
        Extract path size.
        :return: path size
        '''
        return len(self._path)

    def count_delimiters(self, delim, string):
        '''
        Count delimiters like: ‘-’, ‘@’, ‘?’, ‘.’, ‘=’, ‘%’, ‘http’, ‘www’ in a given string.
        :param delim ‘-’, ‘@’, ‘?’, ‘.’, ‘=’, ‘%’, ‘http’, ‘www’
        :return: the number of delimiters
        '''
        return str.lower(string).count(delim)

    def count_digits(self, string):
        '''
        Count digits in a given string.
        :return: the number of digits
        '''
        digits = [l for l in string if l.isdigit()]
        return len(digits)

    def count_tokens(self):
        '''
        Count tokens delimited by: ‘/’ , ‘?’ , ‘.’ , ‘=’, ‘-’ and ‘_’.
        :return: the number of tokens
        '''
        tokens = re.split(r'[/?.=-_]', self._URL)
        # tokens.remove('')
        return len(tokens)

    def count_directories(self):
        '''
        Count directories.
        :return: the number of directories from path
        '''
        return len(self._path.split('/'))

    def contain_protocol(self):
        '''
        Verify if scheme exists.
        :return: 0 if exists else 1
        '''
        if self._scheme == 'http' or 'https':
            return True
        else:
            return False

    def vowel_consonant_ratio_in_hostname(self):
        '''
        Calculate the ratio between vowels and consonants from hostName.
        :return: vowel/consonant
        '''
        if self._hostName is not None:
            vowels = "aeiouAEIOU"
            vowelsNum = len([v for v in self._hostName if v in vowels])
            consonantNum = len([c for c in self._hostName if c not in vowels])
            return round(vowelsNum / consonantNum, 2)
        return 0.0

    def digit_letter_ratio(self):
        '''
        Calculate the ratio between digits and letters from URL.
        :return: digit/letter
        '''
        digitsNo = len([l for l in self._URL if l.isdigit()])
        lettersNo = len(self._URL) - digitsNo
        return digitsNo / lettersNo

    def count_blacklist_word(self):
        '''
        Blacklists such as the Google Safebrowsing API
        :return:
        '''
        pass

    def similarity_to_most_popular_websites(self):
        pass