from FeatureExtraction import FeatureExtraction
from sklearn import preprocessing
import matplotlib.pyplot as plt
import pandas as pd

# Load the data
train_data = pd.read_csv("train.csv")
validation_data = pd.read_csv("validation.csv")
test_data = pd.read_csv("test_samples_only.csv")

train = [m for m in zip(train_data['url'], train_data['label'])]
benign_counts = len([b for b in train if b[1] == 0])
malware_counts = len([m for m in train if m[1] == 1])

plt.bar(['benign', 'malware'], [benign_counts, malware_counts], color=['blue', 'red'])

plt.xlabel('Label')
plt.ylabel('Count')
plt.title('Distribution of Benign and Malware URLs in Training Data')

plt.show()

# Extract features

inputs = [data for data in train_data['url']]
outputs = [data for data in train_data['label']]


# Visualization
URLs = [FeatureExtraction(u) for u in inputs]

hostNameSize = []
pathSize = []

for url in URLs:
    hostNameSize.append(url.extractHostnameSize())
    pathSize.append(url.extractPathSize())

# Normalization
normHostNameSize1 = preprocessing.normalize([hostNameSize])
normPathSize1 = preprocessing.normalize([pathSize])

normHostNameSize= [element for sublist in normHostNameSize1 for element in sublist]
normPathSize= [element for sublist in normPathSize1 for element in sublist]

import matplotlib.pyplot as plt

labels = set(outputs)
noData = len(hostNameSize)
for crtLabel in labels:
    x = [normHostNameSize[i] for i in range(noData) if outputs[i] == crtLabel]
    y = [normPathSize[i] for i in range(noData) if outputs[i] == crtLabel]
    plt.scatter(x, y, label=outputs[crtLabel])
plt.xlabel('host name size')
plt.ylabel('path size')
plt.legend()
plt.show()


# Plot features to check linearity

# Train the classifier

# Plot the result

# Predict on the test set and save results to submission file

# Calculate performance metrics
